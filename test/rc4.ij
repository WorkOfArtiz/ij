function mod(a, b) {
  if (b & (b - 1) == 0)
    return a & (b - 1);

  for (; a >= b; a -= b) {}
  return a;
}

function div(a, b) {
  for (var count = 0; a >= b; a -= b)
    count += 1;

  return count;
}

function print_hex(x) {
  var lower = x & 0xf;
  var upper = div(x & 0xf0, 16);

  if (upper < 10)
    $putc(upper + '0');
  else 
    $putc(-10 + 'a' + upper);

  if (lower < 10)
    $putc(lower + '0');
  else 
    $putc(-10 + 'a' + lower);
  
  return 0;
}

constant xor_pattern1 = 0xaaaaaaaa;
constant xor_pattern2 = 0x55555555;

function xor(a, b) {
  return (((a & xor_pattern1) + (b & xor_pattern1)) & xor_pattern1) |
         (((a & xor_pattern2) + (b & xor_pattern2)) & xor_pattern2);
}

function malloc(size) jas {
  ILOAD size
  NEWARRAY
  IRETURN
}

function rc4_init(password, length) {
  var stream_state = malloc(256);

  for (var i = 0; i < 256; i+=1)
    stream_state[i] = i;
  
  var j = 0;
  for (var i = 0; i < 256; i += 1)
  {
    j = (j + stream_state[i] + password[mod(i, length)]) & 0xff;
    
    // swap
    var tmp = stream_state[j];
    stream_state[j] = stream_state[i];
    stream_state[i] = tmp;
  }

  return stream_state;
}

function rc4_crypt(S)
{
  var i = 0;
  var j = 0;

  for (var char = $getc(); char; char = $getc()) {
    i = (i + 1) & 0xff;
    j = (j + S[i]) & 0xff;

    // swap
    var tmp = S[j];
    S[j] = S[i];
    S[i] = tmp;

    // calculated PRGA
    var K = S[(S[i] + S[j]) & 0xff];

    // output calculated byte
    //print_hex(xor(char, K));
    //$putc(' ');
    $putc(xor(char, K));
  }

  return 0;
}

function __main__() {
  var password = malloc(4);
  password[0] = 'p';
  password[1] = 'o';
  password[2] = 'o';
  password[3] = 'p';

  var S = rc4_init(password, 4);
  return rc4_crypt(S);
}